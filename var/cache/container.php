<?php

namespace DIContainer;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class CachedContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'App\\Db\\DbProvider' => 'getDbProviderService',
            'App\\Kernel' => 'getKernelService',
            'Controller\\AdminController' => 'getAdminControllerService',
            'Controller\\OrderController' => 'getOrderControllerService',
            'Controller\\ProductController' => 'getProductControllerService',
            'Model\\Repository\\Basket' => 'getBasketService',
            'Model\\Repository\\Product' => 'getProductService',
            'Service\\Billing\\Creator' => 'getCreatorService',
            'Service\\Communication\\Creator' => 'getCreator2Service',
            'Service\\Discount\\Creator' => 'getCreator3Service',
            'Service\\Order\\Basket' => 'getBasket2Service',
            'Service\\Order\\Checkout' => 'getCheckoutService',
            'Service\\Product\\Product' => 'getProduct2Service',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver' => 'getArgumentResolverService',
            'Symfony\\Component\\Routing\\RequestContext' => 'getRequestContextService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    /**
     * Gets the public 'App\Db\DbProvider' shared autowired service.
     *
     * @return \App\Db\DbProvider
     */
    protected function getDbProviderService()
    {
        return $this->services['App\\Db\\DbProvider'] = new \App\Db\DbProvider('data/database.sqlite');
    }

    /**
     * Gets the public 'App\Kernel' shared autowired service.
     *
     * @return \App\Kernel
     */
    protected function getKernelService()
    {
        return $this->services['App\\Kernel'] = new \App\Kernel(($this->services['Symfony\\Component\\Routing\\RequestContext'] ?? ($this->services['Symfony\\Component\\Routing\\RequestContext'] = new \Symfony\Component\Routing\RequestContext())), ($this->services['Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver'] ?? ($this->services['Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver())));
    }

    /**
     * Gets the public 'Controller\AdminController' shared autowired service.
     *
     * @return \Controller\AdminController
     */
    protected function getAdminControllerService()
    {
        return $this->services['Controller\\AdminController'] = new \Controller\AdminController(($this->services['Service\\Product\\Product'] ?? $this->getProduct2Service()));
    }

    /**
     * Gets the public 'Controller\OrderController' shared autowired service.
     *
     * @return \Controller\OrderController
     */
    protected function getOrderControllerService()
    {
        return $this->services['Controller\\OrderController'] = new \Controller\OrderController(($this->services['Service\\Order\\Basket'] ?? $this->getBasket2Service()), ($this->services['Service\\Order\\Checkout'] ?? $this->getCheckoutService()));
    }

    /**
     * Gets the public 'Controller\ProductController' shared autowired service.
     *
     * @return \Controller\ProductController
     */
    protected function getProductControllerService()
    {
        return $this->services['Controller\\ProductController'] = new \Controller\ProductController(($this->services['Service\\Product\\Product'] ?? $this->getProduct2Service()));
    }

    /**
     * Gets the public 'Model\Repository\Basket' shared autowired service.
     *
     * @return \Model\Repository\Basket
     */
    protected function getBasketService()
    {
        return $this->services['Model\\Repository\\Basket'] = new \Model\Repository\Basket(($this->services['App\\Db\\DbProvider'] ?? ($this->services['App\\Db\\DbProvider'] = new \App\Db\DbProvider('data/database.sqlite'))));
    }

    /**
     * Gets the public 'Model\Repository\Product' shared autowired service.
     *
     * @return \Model\Repository\Product
     */
    protected function getProductService()
    {
        return $this->services['Model\\Repository\\Product'] = new \Model\Repository\Product(($this->services['App\\Db\\DbProvider'] ?? ($this->services['App\\Db\\DbProvider'] = new \App\Db\DbProvider('data/database.sqlite'))));
    }

    /**
     * Gets the public 'Service\Billing\Creator' shared autowired service.
     *
     * @return \Service\Billing\Creator
     */
    protected function getCreatorService()
    {
        return $this->services['Service\\Billing\\Creator'] = new \Service\Billing\Creator();
    }

    /**
     * Gets the public 'Service\Communication\Creator' shared autowired service.
     *
     * @return \Service\Communication\Creator
     */
    protected function getCreator2Service()
    {
        return $this->services['Service\\Communication\\Creator'] = new \Service\Communication\Creator();
    }

    /**
     * Gets the public 'Service\Discount\Creator' shared autowired service.
     *
     * @return \Service\Discount\Creator
     */
    protected function getCreator3Service()
    {
        return $this->services['Service\\Discount\\Creator'] = new \Service\Discount\Creator();
    }

    /**
     * Gets the public 'Service\Order\Basket' shared autowired service.
     *
     * @return \Service\Order\Basket
     */
    protected function getBasket2Service()
    {
        return $this->services['Service\\Order\\Basket'] = new \Service\Order\Basket(($this->services['Model\\Repository\\Basket'] ?? $this->getBasketService()), ($this->services['Model\\Repository\\Product'] ?? $this->getProductService()));
    }

    /**
     * Gets the public 'Service\Order\Checkout' shared autowired service.
     *
     * @return \Service\Order\Checkout
     */
    protected function getCheckoutService()
    {
        return $this->services['Service\\Order\\Checkout'] = new \Service\Order\Checkout(($this->services['Model\\Repository\\Basket'] ?? $this->getBasketService()), ($this->services['Service\\Discount\\Creator'] ?? ($this->services['Service\\Discount\\Creator'] = new \Service\Discount\Creator())), ($this->services['Service\\Communication\\Creator'] ?? ($this->services['Service\\Communication\\Creator'] = new \Service\Communication\Creator())), ($this->services['Service\\Billing\\Creator'] ?? ($this->services['Service\\Billing\\Creator'] = new \Service\Billing\Creator())));
    }

    /**
     * Gets the public 'Service\Product\Product' shared autowired service.
     *
     * @return \Service\Product\Product
     */
    protected function getProduct2Service()
    {
        return $this->services['Service\\Product\\Product'] = new \Service\Product\Product(($this->services['Model\\Repository\\Product'] ?? $this->getProductService()));
    }

    /**
     * Gets the public 'Symfony\Component\HttpKernel\Controller\ArgumentResolver' shared autowired service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected function getArgumentResolverService()
    {
        return $this->services['Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver();
    }

    /**
     * Gets the public 'Symfony\Component\Routing\RequestContext' shared autowired service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRequestContextService()
    {
        return $this->services['Symfony\\Component\\Routing\\RequestContext'] = new \Symfony\Component\Routing\RequestContext();
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    protected function getDefaultParameters(): array
    {
        return [
            'db.path' => 'data/database.sqlite',
            'environment' => 'dev',
        ];
    }
}
